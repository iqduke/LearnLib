-->高级特性
1.切片，范围是一个前闭后开的一个区间比如 0：3，1：3
>>> L
[1, 2, 3, 4, 5, 6, 7, 8, 10]
>>> L[0:3]
[1, 2, 3]
>>> L[1:3]
[2, 3]
>>> 
如果第一个是0，或者后一个是最后一个均可省略
>>> L[:3]
[1, 2, 3]
>>> L[3:]
[4, 5, 6, 7, 8, 10]
>>> 
也可以倒序从最后一个元素开始，不过索引为-1
>>> L[:-1]
[1, 2, 3, 4, 5, 6, 7, 8]
>>> 
记步的切片
>>> L[::2]
[1, 3, 5, 7, 10]
>>> 
元组和字符串均可入列表一样使用切片

2.可迭代
通过for xx in ……来完成迭代
Python内置的enumerate函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身：

3.列表生成式
range()
>>> range(10)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> range(1,10)
[1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> 

根据列表生成列表
>>> L
[1, 2, 3, 4, 5, 6, 7, 8, 10]
>>> L4=[x*x for x in L]
>>> L4
[1, 4, 9, 16, 25, 36, 49, 64, 100]
>>> 
有条件的
>>> L
[1, 2, 3, 4, 5, 6, 7, 8, 10]
>>> L5=[x*x for x in L if x%2==0]
>>> L5
[4, 16, 36, 64, 100]
>>> 

两层循环
>>> L6=[m+n for m in 'ABC' for n in 'XYZ']
>>> L6
['AX', 'AY', 'AZ', 'BX', 'BY', 'BZ', 'CX', 'CY', 'CZ']
>>> 

生成器 generator，generator是一种算法，而非结果，由.netx()调用获得下一个结果，或者for in 迭代。

>>> g = (x * x for x in range(10))
>>> g
<generator object <genexpr> at 0x0000000002719CA8>
>>> 

或者使用yield关键字
>>> def odd():
	print 'set 1'
	yield 1
	print 'set 2'
	yield 2
	print 'set 3'
	yield 3

	
>>> odd
<function odd at 0x00000000029B83C8>
>>> odd()
<generator object odd at 0x000000000273B7E0>
>>> 

generator保存的是算法，每次调用next()，就计算出下一个元素的值，直到计算到最后一个元素，
没有更多的元素时，抛出StopIteration的错误。

-->函数式
函数式编程的一个特点就是，允许把函数本身作为参数传入另一个函数，还允许返回一个函数！类似于高级语言里的函数指针，或委托
高阶函数，就是让函数的参数能够接收别的函数。
>>> def add(x,y,f):
	return f(x)+f(y)

>>> z = add(1,-10,abs)
>>> z
11
>>> 
Python内建了map()和reduce()函数

map函数，接受两个参数，一个是函数，一个是序列，map将传入的函数一次作用到序列的每个元素上，并返回一个新的序列
reduce ,接受两个参数，一个是函数，一个是序列，但是函数要要两个参数，reduce把结果和序列的下一个元素继续累积运算
filter 过滤。和map()类似，filter()也接收一个函数和一个序列。和map()不同的时，filter()把传入的函数依次作用于每个元素，
然后根据返回值是True还是False决定保留还是丢弃该元素。
sorted

返回函数
>>> def lazy_sum(*args):
	def sum():
		ax=0
		for n in args:
			print n
			ax = ax+n
		return ax
	return sum

>>> L
[1, 2, 3, 4, 5, 6, 7, 8, 10]
>>> f = lazy_sum(*L)
>>> f
<function sum at 0x00000000029B8518>
>>> f()
1
2
3
4
5
6
7
8
10
46
>>> 

匿名函数，lambda表达式
>>> f = lambda x,y:x*y
>>> f(3,4)
12
>>> 

装饰器：借助Python的@语法，把decorator置于函数的定义处

偏函数：
当函数的参数个数太多，需要简化时，使用functools.partial可以创建一个新的函数，
这个新函数可以固定住原函数的部分参数，从而在调用时更简单。
>>> import functools
>>> int2 = functools.partial(int, base=2)
>>> int2('1000000')
64
>>> int2('1010101')
85

